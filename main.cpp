
/*	This module is to get DirectoryWatch started.*/

#include <gtk/gtk.h>
#include <string.h>
#include <stdlib.h>
#include <iostream>
#include <fstream>
#include <string>

#include "main.h"

        GtkBuilder	*builder;
        GtkWidget	*window;
	GtkWidget	*MainScreenHeader;
	GtkWidget	*ProjectLabel, *statuslabel, *rootlabel;
	GtkEntry	*Project, *CoresNo, *Status, *ROOT;

	GtkWidget	*add_dir, *del_dir, *show_dir, *ck_pop, *ck_val, *ck_rep_gen, *ck_rep;


/*	Variable declarations	*/
extern gchar WorkingPath[];		//to directory with all projects.
extern gchar WorkingProject[];
extern gchar RootPath[];
extern gchar MoniterDir[];

extern	gchar	deldircmd[];	//This is global used in other modules.

extern "C"
int on_MainScreen_delete_event()	{
	std::cout << "Quit main widget little x." << std::endl;
	gtk_main_quit ();
	return(FALSE);		} 
extern "C"
void on_MainQuit_activate (void) 	{
	std::cout << "File/Quit." << std::endl;
	gtk_main_quit ();
	return;				} 

extern "C"
int on_NewProject_activate()	{
char cmd[500];
char temp[500];
DIR *dir;
struct dirent *DirEntry;
std::string line;
	gtk_entry_set_text(Status, "\0");
	strcpy(WorkingProject, "\0");	//Clear any provious stuff.
	std::cout << "NewProject pressed." << std::endl;
	newproject (0, NULL);	//Get name of new project.

	strcpy(temp, WorkingPath);
	strcat(temp, WorkingProject);
	strcpy(WorkingProject, temp);
//	gtk_entry_set_text(Project, WorkingProject);

	std::cout << "project to add is => " << WorkingProject << std::endl;
	strcpy(cmd, "mkdir --verbose ");	//Create the new Project directory.
//	strcat(cmd, WorkingPath);
	strcat(cmd, WorkingProject);
	strcat (cmd, " > proj.txt 2>&1");	//mkdir, std error to file proj.txt

	if(0 == system(cmd))
	{	//mkdir no problems.
		std::ifstream infile("proj.txt");
		std::getline(infile, line);
		const char *data = line.c_str();	//convert std::string to c_str.
		std::cout << "data is => " << data << std::endl;
		std::cout << "line is => " << line << std::endl;
		gtk_entry_set_text(Status, data);	//mkdir result to selected project tab
		infile.close();

		rootpath(0, NULL);	//Get the path to the root directory to watch.
//		std::cout << "RootPath = " << RootPath << std::endl;
		gtk_entry_set_text(ROOT, RootPath);
//		strcpy(cmd, WorkingPath);	//Using cmd as temp
		strcpy(cmd, WorkingProject);
//		strcpy(temp, cmd);
		strcat(cmd, "/root.txt");
		std::ofstream outfile(cmd);
		outfile << "# This file was generated by New project" << std::endl;
		outfile << temp << std::endl;
		outfile << RootPath << std::endl << std::endl;
		outfile.close();
	}
	else
	{
		gtk_entry_set_text(Status, "FAILED, existing new project???");
	}
	return(FALSE);
			}
extern "C"
int on_DeleteProject_activate()
{
int result;	//holds result of system deldircmd)
DIR *dir;
struct dirent *DirEntry;
std::string line;
	gtk_entry_set_text(Status, "\0");
	gtk_widget_set_sensitive(add_dir, FALSE);
	gtk_widget_set_sensitive(del_dir, FALSE);
	gtk_widget_set_sensitive(show_dir, FALSE);
	gtk_widget_set_sensitive(ck_pop, FALSE);
	gtk_widget_set_sensitive(ck_val, FALSE);
	gtk_widget_set_sensitive(ck_rep_gen, FALSE);
	gtk_widget_set_sensitive(ck_rep, FALSE);
	gtk_entry_set_text(Status, "\0");

	strcpy(WorkingProject, "\0");	//Clear any provious stuff.
	std::cout << "DeleteProject pressed." << std::endl;
	deleteproject (0, NULL);	//Get name of project.
std::cout << "WorkingPath    = " << WorkingPath << std::endl;
std::cout << "WorkingProject = " << WorkingProject << std::endl;

	if(0 == strncmp(WorkingPath, WorkingProject, (strlen(WorkingPath) - 1 )))	// Ensure include WorkingPath
	{
		if( strlen(WorkingPath) < strlen(WorkingProject) )	// Ensure project been added?
		{
			std::cout << "Project tobe deleted is => " << WorkingProject << std::endl;
			strcpy(deldircmd, "rm -R ");
			g_strlcat(deldircmd, WorkingProject, 99);
			strcat (deldircmd, " > proj.txt 2>&1");	//std error to file proj.txt
//	=============================================================
			if(1 == WarningDelete(0, NULL))		//How to pass ptr to cmd?
			{
//	=============================================================
				std::cout << "deldircmd = " << deldircmd << std::endl;
				if(0 == system (deldircmd))
				{
					std::ifstream infile("proj.txt");
					std::getline(infile, line);
					std::cout << "deldircmd is => " << deldircmd << std::endl;
					const char *data = line.c_str();	//convert std::string to c_str.
					std::cout << "data is => " << data << std::endl;
					std::cout << "line is => " << line << std::endl;
					gtk_entry_set_text(Project, data);
					infile.close();
				}
				else
				{
					gtk_entry_set_text(Project, "FAILED, existing delete project???");
				}
			}
		}
		else
		{	gtk_entry_set_text(Status, "You failed to selected a project.");	}
	}
	else
	{	gtk_entry_set_text(Status, "Projects not in directory path?");	}

	return(FALSE);
}
extern "C"
int on_ChooseProject_activate()	{

cores(0, NULL);

std::string line;
char temp[100];
	std::cout << "in chooseproject" << std::endl;
	gtk_entry_set_text(Status, "\0");
	chooseproject (0, NULL);
	gtk_entry_set_text(Project, WorkingProject);

	gtk_entry_set_text(ROOT, RootPath);
	std::cout << "WorkingProject = " << WorkingProject << std::endl;
//	need to add root directory.
	strcpy(temp, WorkingProject);
	strcat(temp, "/root.txt");
	std::cout << "root.txt >>= " << temp << std::endl;
		std::ifstream infile(temp);
		std::getline(infile, line);
		std::getline(infile, line);
		std::getline(infile, line);
		const char *data = line.c_str();	//convert std::string to c_str.
		std::cout << "data is => " << data << std::endl;
		std::cout << "line is => " << line << std::endl;
		gtk_entry_set_text(ROOT, data);	//set ROOT tab
		strcpy(RootPath, data);

	return(FALSE);		}
extern "C"
int ProjectHelp_activate() {
	std::cout << "Project Help activated." << std::endl;
	projhelp(0, NULL);
}
/*******************************************************************************/
extern "C"
void on_LinuxDefault_activate() {
char cmd[100];
char temp[100];
int i;
char dir0[] = { "/bin" };
char dir1[] = { "/boot" };
char dir2[] = { "/sbin" };
char dir3[] = { "/usr/bin" };
char dir4[] = { "/usr/sbin" };
char dir5[] = { "/usr/local/bin" };
char dir6[] = { "/usr/local/sbin" };

char *values[5];
int index;
values[0] = dir0;
values[1] = dir1;
values[2] = dir2;
values[3] = dir3;
values[4] = dir4;
values[5] = dir5;
values[6] = dir6;

std::cout << "It's in Linux default directories add" << std::endl;

	gtk_entry_set_text(Status, "\0");
    for (i = 0; i <= 6; ++i)
        {

        strcpy(temp, values[i]);

	    std::cout << "MoniterDir = " << MoniterDir << std::endl;
	    std::cout << "WorkingProject = " << WorkingProject << std::endl;

	    strswap(temp, '/', '_');
	    strcpy(cmd, "mkdir ");
	    strcat(cmd, WorkingProject);
	    strcat(cmd, "/");
	    strcat(cmd, temp);
	    std::cout << "Add linuxdir cmd = " << cmd <<std::endl;
	    if(0 == system(cmd))
		    { gtk_entry_set_text(Status, "Added directory okay."); }
	    else
		    { gtk_entry_set_text(Status, "oops error with mkdir."); }
        }
	return;	}

/*******************************************************************************/
extern "C"
void on_AddDirectory_activate()	{
char cmd[100];
char temp[100];
	gtk_entry_set_text(Status, "\0");
	addmonitored (0, NULL);
	std::cout << "MoniterDir = " << MoniterDir << std::endl;
	std::cout << "WorkingProject = " << WorkingProject << std::endl;
	strcpy(temp, MoniterDir);
	strswap(temp, '/', '_');
	strcpy(cmd, "mkdir ");
	strcat(cmd, WorkingProject);
	strcat(cmd, "/");
	strcat(cmd, temp);
	std::cout << "Add dir cmd = " << cmd <<std::endl;
	if(0 == system(cmd))
		{ gtk_entry_set_text(Status, "Added directory okay."); }
	else
		{ gtk_entry_set_text(Status, "oops error with mkdir."); }
	return;	}

extern "C"
void on_DeleteDirectory_activate()	{
DIR *dir;
struct dirent *DirEntry;
std::string line;

	gtk_entry_set_text(Status, "\0");
	std::cout << "Delete Directory active" << std::endl;
	DeleteDirectory(0, NULL);
	std::cout << "MoniterDir = " << MoniterDir << std::endl;
	std::cout << "WorkingProject - " << WorkingProject << std::endl;
	if(0 == (strncmp(WorkingProject, MoniterDir, (strlen(WorkingProject) - 1 ) ) ) )
	{
		if ( strlen(WorkingProject) < strlen(MoniterDir ) )
		{
			strcpy(deldircmd, "rm -R  ");
			strcat(deldircmd, MoniterDir);
			strcat(deldircmd, " > proj.txt 2>&1");	//std error to file proj.txt
			std::cout << "Delete dir deldircmd = " << deldircmd <<std::endl;

//	=============================================================
			if(1 == WarningDelete(0, NULL))		//How to pass ptr to cmd?
			{			//Bodge use deldircmd and import as external in above call.
				std::cout << "deldircmd = " << deldircmd << std::endl;
				if(0 == system (deldircmd))
				{
						std::ifstream infile("proj.txt");
					std::getline(infile, line);
					std::cout << "deldircmd is => " << deldircmd << std::endl;
					const char *data = line.c_str();	//convert std::string to c_str.
					std::cout << "data is => " << data << std::endl;
					std::cout << "line is => " << line << std::endl;
					infile.close();
				}
				else
				{
					gtk_entry_set_text(Status, "oops error with rm -R bash command.");
				}
			}
		}
		else
			{ gtk_entry_set_text(Status, "Not good project."); }
	}
	else
		{ gtk_entry_set_text(Status, "Directory not selected."); }
return;
}
extern "C"
int on_DirShow_activate() {
	std::cout << "Show directories pressed." << std::endl;
//}

//extern "C"
//void on_DisplayDirectory_activate()	{
	gtk_entry_set_text(Status, "\0");
	get_dirs_watched();
	return 0;	}

extern "C"
int DirHelp_activate() {
	std::cout << "Directory Help activated." << std::endl;
	dirhelp(0, NULL);
}
/*******************************************************************************/
extern "C"
void on_PopulateMD5_activate()	{
int temp;
	gtk_entry_set_text(Status, "\0");
	if(1 == Warning(0, NULL))
		{
		populate ();
		}
	return;
}
extern "C"
void on_ValidateMD5_activate()	{
	gtk_entry_set_text(Status, "\0");
	validate();
	return;
}

extern "C"
void on_Report_gen_activate() {
	char cmd[400];
	gtk_entry_set_text(Status, "\0");
	strcpy(cmd, "./backend.pl  ");
	strcat(cmd, WorkingProject);
	strcat(cmd, "/");
	if(0 == system (cmd))
		{	reporter(0, NULL); }
	else
		{
		gtk_entry_set_text(Status, "No results backend failed.");
		}
}
extern "C"
void on_Report_log_activate() {

	reporter(0, NULL);
}
extern "C"
int CheckHelpActive() {
	std::cout << "Directory Help activated." << std::endl;
	checkhelp(0, NULL);
}
/*******************************************************************************/
extern "C"
void on_About1_activate() {
	std::cout << "Got signal About1. \n" << std::endl;
	About1 (0, NULL);
	return;
}
extern "C"
int MainHelpActive() {
	std::cout << "Main Help activated." << std::endl;
}

/*******************************************************************************/
main (int argc, char **argv)
{
std::cout << "HOME" << getenv("HOME") << "\n" << std::endl;
strcpy (WorkingPath, getenv("HOME"));
strcat (WorkingPath, "/ProjDirWatch/");
std::cout << "WorkingPath is " << WorkingPath << "\n" << std::endl;
	std::cout << "Entered gtk_init." << std::endl;
        
        gtk_init (&argc, &argv);	//Gets gtk going.
        builder = gtk_builder_new ();

        gtk_builder_add_from_file (builder, "MainScreen.glade", NULL);

        window = GTK_WIDGET (gtk_builder_get_object (builder, "MainScreen"));

if (NULL == window)
{
    /* Print out the error. You can use GLib's message logging  */
    fprintf(stderr, "Unable to file object with id \"MainScreen\" \n");
}


        MainScreenHeader = GTK_WIDGET (gtk_builder_get_object (builder, "MainScreenHeader"));
        ProjectLabel = GTK_WIDGET (gtk_builder_get_object (builder, "ProjectLabel"));
        Project = GTK_ENTRY (gtk_builder_get_object (builder, "Project"));
	CoresNo = GTK_ENTRY (gtk_builder_get_object (builder, "CoresNo"));
	ROOT = GTK_ENTRY (gtk_builder_get_object (builder, "ROOT"));
        rootlabel = GTK_WIDGET (gtk_builder_get_object (builder, "rootlLabel"));

        Status = GTK_ENTRY (gtk_builder_get_object (builder, "Status"));
        statuslabel = GTK_WIDGET (gtk_builder_get_object (builder, "statuslLabel"));

	add_dir	 = GTK_WIDGET (gtk_builder_get_object (builder, "AddDirectory"));
	del_dir  = GTK_WIDGET (gtk_builder_get_object (builder, "DeleteDirectory"));
	show_dir = GTK_WIDGET (gtk_builder_get_object (builder, "DirShow"));
	ck_pop	 = GTK_WIDGET (gtk_builder_get_object (builder, "PopulateMD5"));
	ck_val	 = GTK_WIDGET (gtk_builder_get_object (builder, "ValidateMD5"));
	ck_rep_gen = GTK_WIDGET (gtk_builder_get_object (builder, "Report_gen"));
	ck_rep   = GTK_WIDGET (gtk_builder_get_object (builder, "Report_log"));

        gtk_builder_connect_signals (builder, NULL);          
        g_object_unref (G_OBJECT (builder));

//std::cout << "builder 3 done\n" << std::endl;

        gtk_widget_show (window);
	std::cout << "Main set up and showing window." << std::endl;
//	****************************************************************
	gtk_main ();

	std::cout << "Exiting MAIN." << std::endl;
     
        return 0;
}


