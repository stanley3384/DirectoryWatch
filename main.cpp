#include <gtk/gtk.h>
#include <string.h>
#include <stdlib.h>
#include <iostream>
#include <fstream>
#include <string>

#include "main.h"

        GtkBuilder	*builder;
        GtkWidget	*window;
	GtkWidget	*MainScreenHeader;
	GtkWidget	*ProjectLabel, *statuslabel, *rootlabel;
	GtkEntry	*Project, *Status, *ROOT;

/*	Variable declarations	*/
extern gchar WorkingPath[];		//to directory with all projects.
extern gchar WorkingProject[];
extern gchar RootPath[];
extern gchar MoniterDir[];

extern	gchar	deldircmd[];	//This is global used in other modules.

extern "C"
int on_MainScreen_delete_event()	{
	std::cout << "Quit main widget little x." << std::endl;
	gtk_main_quit ();
	return(FALSE);		} 
extern "C"
void on_MainQuit_activate (void) 	{
	std::cout << "File/Quit." << std::endl;
	gtk_main_quit ();
	return;				} 

extern "C"
int on_NewProject_activate()	{
char cmd[500];
char temp[500];
DIR *dir;
struct dirent *DirEntry;
std::string line;
	strcpy(WorkingProject, "\0");	//Clear any provious stuff.
	std::cout << "NewProject pressed." << std::endl;
	newproject (0, NULL);	//Get name of new project.
	std::cout << "project to add is => " << WorkingProject << std::endl;
	strcpy(cmd, "mkdir --verbose ");	//Create the new Project directory.
	strcat(cmd, WorkingPath);
	strcat(cmd, WorkingProject);

	strcat (cmd, " > proj.txt 2>&1");	//mkdir, std error to file proj.txt

	if(0 == system(cmd))
	{	//mkdir no problems.
		std::ifstream infile("proj.txt");
		std::getline(infile, line);
		const char *data = line.c_str();	//convert std::string to c_str.
		std::cout << "data is => " << data << std::endl;
		std::cout << "line is => " << line << std::endl;
		gtk_entry_set_text(Project, data);	//mkdir result to selected project tab
		infile.close();
		rootpath(0, NULL);	//Get the path to the root directory to watch.
//		std::cout << "RootPath = " << RootPath << std::endl;
		gtk_entry_set_text(ROOT, RootPath);
		strcpy(cmd, WorkingPath);	//Using cmd as temp
		strcat(cmd, WorkingProject);
		strcpy(temp, cmd);
		strcat(cmd, "/root.txt");
		std::ofstream outfile(cmd);
		outfile << "# This file was generated by New project" << std::endl;
		outfile << temp << std::endl;
		outfile << RootPath << std::endl << std::endl;
		outfile.close();
	}
	else
	{
		gtk_entry_set_text(Project, "FAILED, existing new project???");
	}
	return(FALSE);
			}
extern "C"
int on_DeleteProject_activate()
{
int result;	//holds result of system deldircmd)
DIR *dir;
struct dirent *DirEntry;
std::string line;
	strcpy(WorkingProject, "\0");	//Clear any provious stuff.
	std::cout << "DeleteProject pressed." << std::endl;
	deleteproject (0, NULL);	//Get name of new project.
	std::cout << "Project tobe deleted is => " << WorkingProject << std::endl;
	strcpy(deldircmd, "rm -R ");
	g_strlcat(deldircmd, WorkingProject, 99);
	strcat (deldircmd, " > proj.txt 2>&1");	//std error to file proj.txt
//	=============================================================
	result = WarningDelete(0, NULL);	//Try not too kill everything

	if(1 == result)		//How to pass ptr to cmd?
	{			//Bodge use deldircmd and import as external in above call.
//	=============================================================

		result = system (deldircmd);
		std::cout << "deldircmd = " << deldircmd << std::endl;
		std::cout << "The result of system callb is = " << result << std::endl;
		if(0 == result)
		{
			std::ifstream infile("proj.txt");
			std::getline(infile, line);
			std::cout << "deldircmd is => " << deldircmd << std::endl;
			const char *data = line.c_str();	//convert std::string to c_str.
			std::cout << "data is => " << data << std::endl;
			std::cout << "line is => " << line << std::endl;
			gtk_entry_set_text(Project, data);
			infile.close();
		}
		else
		{
			gtk_entry_set_text(Project, "FAILED, existing delete project???");
		}
	}
	return(FALSE);
}
extern "C"
int on_ChooseProject_activate()	{
std::string line;
char temp[100];
	std::cout << "in chooseproject" << std::endl;
	chooseproject (0, NULL);
	gtk_entry_set_text(Project, WorkingProject);

	gtk_entry_set_text(ROOT, RootPath);
	std::cout << "WorkingProject = " << WorkingProject << std::endl;
//	need to add root directory.
	strcpy(temp, WorkingProject);
	strcat(temp, "/root.txt");
	std::cout << "root.txt >>= " << temp << std::endl;
		std::ifstream infile(temp);
		std::getline(infile, line);
		std::getline(infile, line);
		std::getline(infile, line);
		const char *data = line.c_str();	//convert std::string to c_str.
		std::cout << "data is => " << data << std::endl;
		std::cout << "line is => " << line << std::endl;
		gtk_entry_set_text(ROOT, data);	//set ROOT tab
		strcpy(RootPath, data);

	return(FALSE);		}
/*******************************************************************************/
extern "C"
void on_AddDirectory_activate()	{
char cmd[100];
char temp[100];
	addmonitored (0, NULL);
	std::cout << "MoniterDir = " << MoniterDir << std::endl;
	strcpy(temp, MoniterDir);
	strswap(temp, '/', '_');
	strcpy(cmd, "mkdir ");
	strcat(cmd, WorkingProject);
	strcat(cmd, "/");
	strcat(cmd, temp);
	std::cout << "Add dir cmd = " << cmd <<std::endl;
	if(0 == system(cmd))
		{ gtk_entry_set_text(Status, "Added directory okay."); }
	else
		{ gtk_entry_set_text(Status, "oops error with mkdir."); }
	return;	}

extern "C"
void on_DeleteDirectory_activate()	{
int result;	//holds result of system deldircmd)
DIR *dir;
struct dirent *DirEntry;
std::string line;

//	char cmd[100];
	std::cout << "Delete Directory active" << std::endl;
	DeleteDirectory(0, NULL);
	std::cout << "MoniterDir = " << MoniterDir << std::endl;
	strcpy(deldircmd, "rm -R  ");
	strcat(deldircmd, MoniterDir);
	strcat(deldircmd, " > proj.txt 2>&1");	//std error to file proj.txt
	std::cout << "Delete dir deldircmd = " << deldircmd <<std::endl;

//	=============================================================
	result = WarningDelete(0, NULL);	//Try not too kill everything

	if(1 == result)		//How to pass ptr to cmd?
	{			//Bodge use deldircmd and import as external in above call.
//	=============================================================

		result = system (deldircmd);
		std::cout << "deldircmd = " << deldircmd << std::endl;
		std::cout << "The result of system callb is = " << result << std::endl;
		if(0 == result)
		{
			std::ifstream infile("proj.txt");
			std::getline(infile, line);
			std::cout << "deldircmd is => " << deldircmd << std::endl;
			const char *data = line.c_str();	//convert std::string to c_str.
			std::cout << "data is => " << data << std::endl;
			std::cout << "line is => " << line << std::endl;
//			gtk_entry_set_text(Project, data);
			infile.close();
		}
		else
		{
			gtk_entry_set_text(Status, "oops error with rm -R bash command.");
		}
	}
/*
	if(0 == system(cmd))
		{ gtk_entry_set_text(Status, "Deleted directory okay."); }
	else
		{ gtk_entry_set_text(Status, "oops error with rm -R bash command."); }	*/
	return;
}

extern "C"
void on_PopulateMD5_activate()	{
int temp;
	if(1 == Warning(0, NULL))
//temp = Warning(0, NULL);
//std::cout << "temp is = " << temp << std::endl;
//		if(1 == temp) 

		{
		populate ();
		}
	return;
}
extern "C"
void on_ValidateMD5_activate()	{
	validate();
	return;
}

extern "C"
void on_Report_gen_activate() {
	char cmd[400];
	strcpy(cmd, "./backend.pl  ");
	strcat(cmd, WorkingProject);
	strcat(cmd, "/");
	system (cmd);
	reporter(0, NULL);
}
extern "C"
void on_Report_log_activate() {

	reporter(0, NULL);
}

extern "C"
void on_About1_activate() {
	std::cout << "Got signal About1. \n" << std::endl;
	About1 (0, NULL);
	return;
}

main (int argc, char **argv)
{
	std::cout << "Entered gtk_init." << std::endl;
        
        gtk_init (&argc, &argv);	//Gets gtk going.
        builder = gtk_builder_new ();
std::cout << "builder1 done\n" << std::endl;
        gtk_builder_add_from_file (builder, "MainScreen.glade", NULL);
std::cout << "builder2 done\n" << std::endl;
        window = GTK_WIDGET (gtk_builder_get_object (builder, "MainScreen"));
        MainScreenHeader = GTK_WIDGET (gtk_builder_get_object (builder, "MainScreenHeader"));
        ProjectLabel = GTK_WIDGET (gtk_builder_get_object (builder, "ProjectLabel"));
        Project = GTK_ENTRY (gtk_builder_get_object (builder, "Project"));
	ROOT = GTK_ENTRY (gtk_builder_get_object (builder, "ROOT"));
        rootlabel = GTK_WIDGET (gtk_builder_get_object (builder, "rootlLabel"));

        Status = GTK_ENTRY (gtk_builder_get_object (builder, "Status"));
        statuslabel = GTK_WIDGET (gtk_builder_get_object (builder, "statuslLabel"));


        gtk_builder_connect_signals (builder, NULL);          
        g_object_unref (G_OBJECT (builder));

        gtk_widget_show (window);
	std::cout << "Main set up and showing window." << std::endl;
//	****************************************************************
	gtk_main ();

	std::cout << "Exiting MAIN." << std::endl;
     
        return 0;
}


